name: <Native> Linter

on: [pull_request]
# on:
  # pull_request_target

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  super-lint:
    # Name the Job
    name: ClangTidy Android
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Python3
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install python deps
        run: |
          python -m pip install PyYAML==5.4.1 Cheetah3
      - name: Download external
        run: |
          EXT_VERSION=`node ./.github/workflows/get-native-external-version.js`
          git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos-creator/engine-native-external native/external

      - name: Generate bindings
        shell: bash
        run: |
          python -V
          cd ./native/tools/tojs
          python ./genbindings.py
          rm userconf.ini

      - name: Generate Compile database
        shell: bash
        run: |
          cd native
          ./utils/generate_compile_commands_android.sh

      - uses: shenxianpeng/cpp-linter-action@v1
        name: lint action
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: file
          version: 11
          thread-comments: false
          repo-root: native

      - name: Fail fast!
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "Some files failed the linting checks!"
          exit 1
        # for actual deployment
        # run: exit 1
      # - name: Generate clang-fix.yaml
      #   shell: bash
      #   if: ${{ steps.listchanged.outputs.source == 'true' }}
      #   run: |
      #     CPP="${{ steps.listchanged.outputs.source_files }}"
      #     FILTERED=`node .github/workflows/filter_by_cdb.js $CPP`
      #     if [[ "$FILTERED-xxx" == "-xxx" ]]; then
      #       echo "no source files match"
      #     else
      #       for src in $FILTERED
      #       do
      #         echo "lint file ${src} ..."
      #       done
      #       clang-tidy-11 --format-style=file --export-fixes=clang-fixes.yaml $FILTERED
      #       du -h clang-fixes.yaml
      #     fi
      # - name: clang-tidy-action
      #   uses: PatriceJiang/clang-tidy-action@github-api
      #   if: hashFiles('clang-fixes.yaml') != ''
      #   with:
      #     fixesFile: clang-fixes.yaml
      #     useLog: false
      #     noFailOnIssue: false
      #     repo-token: ${{ secrets.PR_TOKEN }}
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     error-limit: 200
